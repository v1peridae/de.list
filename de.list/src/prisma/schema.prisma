// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id @default(cuid())
  email        String  @unique
  passwordHash String
  displayName  String?
  friendCode   String  @unique @db.Char(6)

  friends  User[] @relation("UserFriends")
  friendOf User[] @relation("UserFriends")

  sentRequests     FriendRequest[] @relation("SentRequests")
  receivedRequests FriendRequest[] @relation("ReceivedRequests")

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  UserBook  UserBook[]

  @@index([friendCode])
}

model FriendRequest {
  id          String              @id @default(cuid())
  fromId      String
  toId        String
  status      FriendRequestStatus @default(PENDING)
  createdAt   DateTime            @default(now())
  respondedAt DateTime?

  from User @relation("SentRequests", fields: [fromId], references: [id])
  to   User @relation("ReceivedRequests", fields: [toId], references: [id])

  @@unique([fromId, toId])
  @@index([toId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Book {
  id               String   @id @default(cuid())
  openLibraryId    String   @unique
  title            String
  author           String
  coverId          Int?
  firstPublishYear Int?
  meta             Json?
  createdAt        DateTime @default(now())

  users UserBook[]

  @@index([title])
}

model UserBook {
  id     String @id @default(cuid())
  user   User   @relation(fields: [userId], references: [id])
  userId String
  book   Book   @relation(fields: [bookId], references: [id])
  bookId String

  status     ReadingStatus @default(TO_READ)
  rating     Int?
  startedAt  DateTime?
  finishedAt DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, bookId])
}

enum ReadingStatus {
  TO_READ
  READING
  FINISHED
  DROPPED
}
