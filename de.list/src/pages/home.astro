---
import "../styles/global.css";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>de.list</title>
  </head>
  <body class="flex flex-col items-center h-screen">
    <div class="w-full max-w-6xl px-4 relative pt-8">
      <nav class="absolute right-6 top-8 flex gap-8 items-center">
        <button type="button" class="navbar text-3xl ml-3">+</button>
        <button type="button" class="navbar text-3xl ml-3">friends</button>
        <button type="button" class="navbar text-3xl ml-3">profile</button>
      </nav>
      <h1 class="text-6xl font-bold text-center">de.list</h1>
    </div>

    <div class="flex flex-col gap-2 mt-16 w-full max-w-md px-4">
      <div class="flex flex-col gap-2 w-full">
        <div class="mt-4">
          <input
            type="text"
            id="searchInput"
            placeholder="what have you been reading?"
            class="w-full bg-transparent border-b-2 text-4xl outline-none border-none subtitle"
          />
        </div>
        <div id="searchResults" class="mt-6 grid grid-cols-3 gap-6"></div>
      </div>
    </div>

    <script>
      let timeoutId;
      const searchInput = document.getElementById("searchInput");
      const searchResults = document.getElementById("searchResults");

      searchInput.addEventListener("input", (e) => {
        clearTimeout(timeoutId);
        timeoutId = setTimeout(() => {
          searchBooks(e.target.value);
        }, 500);
      });

      async function searchBooks(query) {
        if (!query) {
          searchResults.innerHTML = "";
          return;
        }

        try {
          const spellCheckResponse = await fetch(
            `https://openlibrary.org/search.json?q=${encodeURIComponent(query)}&limit=1&spellcheck=true`
          );
          const spellCheckData = await spellCheckResponse.json();

          const suggestedQuery =
            spellCheckData.docs.length === 0 && spellCheckData.spellcheck_suggestions ? spellCheckData.spellcheck_suggestions[1] : query;

          const response = await fetch(
            `https://openlibrary.org/search.json?q=${encodeURIComponent(suggestedQuery)}&limit=12&mode=everything`
          );
          const data = await response.json();

          const booksWithCovers = data.docs
            .filter((book) => book.cover_i && book.author_name && book.author_name.length > 0 && book.first_publish_year)
            .slice(0, 6)
            .map(
              (book) => `
            <div class="book-result flex flex-col items-center text-center">
              <img 
                src="https://covers.openlibrary.org/b/id/${book.cover_i}-M.jpg" 
                alt="${book.title}" 
                class="w-32 h-48 object-cover hover:scale-105 transition-transform"
              />
              <div class="mt-2">
                <h3 class="subtitle text-lg line-clamp-1">${book.title}</h3>
                <p class="subtitle text-sm opacity-75 line-clamp-1">
                  ${book.author_name[0]}
                </p>
                <p class="subtitle text-xs opacity-50">
                  ${book.first_publish_year}
                </p>
              </div>
            </div>
          `
            )
            .join("");

          const suggestionMessage =
            suggestedQuery !== query
              ? `<p class="subtitle text-sm opacity-75 col-span-3 mb-4">Showing results for "${suggestedQuery}"</p>`
              : "";

          searchResults.innerHTML = booksWithCovers
            ? suggestionMessage + booksWithCovers
            : '<p class="subtitle text-center col-span-3">No matching books found.</p>';
        } catch (error) {
          console.error("Error searching books:", error);
          searchResults.innerHTML = '<p class="subtitle text-red-500 col-span-3">Error searching books.</p>';
        }
      }
    </script>
  </body>
</html>
