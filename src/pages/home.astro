---
import "../styles/global.css";
import Header from "../components/Header.astro";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>de.list</title>
  </head>
  <body class="flex flex-col items-center h-screen">
    <Header />

    <div class="flex flex-col gap-2 mt-16 w-full max-w-md px-2">
      <div class="flex flex-col gap-2 w-full">
        <div class="mt-4">
          <input
            type="text"
            id="searchInput"
            placeholder="what have you been reading?"
            class="w-full bg-transparent border-b-2 text-4xl outline-none border-none subtitle"
          />
        </div>
        <div id="searchResults" class="mt-6 grid grid-cols-3 gap-6"></div>
      </div>
    </div>

    <div id="bookModal" class="fixed inset-0 flex items-center justify-center hidden z-50">
      <div class="bg-[#feebf6] text-[#687fe5] p-8 max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto border-2 border-[#687fe5]">
        <div class="flex justify-between items-start mb-6">
          <div></div>
          <button id="closeModal" class="navbar text-3xl"> <span class="text-xl">(close)</span></button>
        </div>

        <div class="flex gap-8">
          <div class="flex-shrink-0 w-48">
            <div class="flex flex-col items-center">
              <div id="modalBookCover" class="w-full h-72 bg-[#687fe5] flex items-center justify-center text-[#feebf6] text-lg mb-4"></div>
              <h1 id="modalBookTitle" class="w-full text-center titles text-2xl outline-none mb-2" contenteditable="true">book name</h1>
              <div class="text-lg subtitle space-y-1 w-full">
                <div>
                  <span>started reading: </span>
                  <input
                    type="date"
                    id="startedReading"
                    class="bg-transparent border-b border-[#687fe5] subtitle text-sm outline-none pb-1"
                  />
                  <span class="text-xs opacity-60"> (optional)</span>
                </div>
                <div>
                  <span>finished reading: </span>
                  <input type="date" id="finishedReading" class="bg-transparent border-b border-[#687fe5] subtitle text-sm outline-none" />
                </div>
              </div>
            </div>
          </div>

          <div class="flex-1">
            <div class="mb-6">
              <label class="block subtitle text-lg mb-2">my notes about it:</label>
              <textarea id="bookNotes" class="w-full h-40 bg-transparent border-2 border-[#687fe5] p-4 subtitle resize-none outline-none"
              ></textarea>
            </div>

            <div class="mb-6">
              <label class="block subtitle text-lg mb-2">favourite sections:</label>
              <textarea
                id="favouriteSections"
                class="w-full h-24 bg-transparent border-2 border-[#687fe5] p-4 subtitle resize-none outline-none"></textarea>
            </div>

            <div class="mb-6">
              <div class="flex items-center gap-4">
                <span class="subtitle">add media!</span>
                <input type="file" id="mediaUpload" accept="image/*,video/*,audio/*" multiple class="hidden" />
                <button
                  type="button"
                  id="attachFilesBtn"
                  class="border-2 border-[#687fe5] px-4 py-2 navbar text-xl hover:bg-[#687fe5] hover:text-[#feebf6] transition-colors"
                >
                  attach files
                </button>
              </div>
              <div id="mediaPreview" class="mt-4 grid grid-cols-4 gap-4"></div>
            </div>

            <div class="flex justify-end">
              <button id="submitBook" type="button" class="bg-[#687fe5] text-[#feebf6] px-8 py-3 navbar text-xl"> submit &lt;3 </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </body>

  <script>
    import { initAuthGuard, addLogoutFunctionality } from "../utils/authGuard";

    let timeoutId: NodeJS.Timeout;
    const searchInput = document.getElementById("searchInput") as HTMLInputElement;
    const searchResults = document.getElementById("searchResults") as HTMLElement;
    const bookModal = document.getElementById("bookModal") as HTMLElement;
    const closeModal = document.getElementById("closeModal") as HTMLElement;
    const submitBook = document.getElementById("submitBook") as HTMLElement;
    const attachFilesBtn = document.getElementById("attachFilesBtn") as HTMLButtonElement;
    const mediaUpload = document.getElementById("mediaUpload") as HTMLInputElement;
    const mediaPreview = document.getElementById("mediaPreview") as HTMLDivElement;
    let uploadedFiles: File[] = [];

    function clearMediaPreview() {
      mediaPreview.innerHTML = "";
      uploadedFiles = [];
      if (mediaUpload) {
        mediaUpload.value = "";
      }
    }

    closeModal.addEventListener("click", () => {
      bookModal.classList.add("hidden");
      clearMediaPreview();
    });

    bookModal.addEventListener("click", (e) => {
      if (e.target === bookModal) {
        bookModal.classList.add("hidden");
        clearMediaPreview();
      }
    });

    submitBook.addEventListener("click", () => {
      console.log("Saving book...");
      bookModal.classList.add("hidden");
      clearMediaPreview();
    });

    attachFilesBtn.addEventListener("click", () => {
      mediaUpload.click();
    });

    mediaUpload.addEventListener("change", (e) => {
      const files = (e.target as HTMLInputElement).files;
      if (!files) return;

      if (uploadedFiles.length + files.length > 8) {
        alert("You can only upload up to 8 files");
        return;
      }

      uploadedFiles = [...uploadedFiles, ...Array.from(files)].slice(0, 8);
      updateMediaPreview();
    });

    function updateMediaPreview() {
      mediaPreview.innerHTML = "";

      uploadedFiles.forEach((file, index) => {
        const previewContainer = document.createElement("div");
        previewContainer.className = "relative border-2 border-[#687fe5] p-2 rounded";

        const fileCounter = document.createElement("span");
        fileCounter.textContent = `${index + 1}/8`;
        fileCounter.className = "absolute top-1 left-1 text-[#687fe5] text-xs subtitle";

        const removeBtn = document.createElement("button");
        removeBtn.innerHTML = "&times;";
        removeBtn.className = "absolute top-1 right-1 text-[#687fe5] hover:text-[#feebf6] text-xl";
        removeBtn.onclick = () => {
          uploadedFiles.splice(index, 1);
          updateMediaPreview();
        };

        if (file.type.startsWith("image/")) {
          const img = document.createElement("img");
          img.src = URL.createObjectURL(file);
          img.className = "w-full h-32 object-cover";
          previewContainer.appendChild(img);
        } else if (file.type.startsWith("video/")) {
          const video = document.createElement("video");
          video.src = URL.createObjectURL(file);
          video.className = "w-full h-32 object-cover";
          video.controls = true;
          previewContainer.appendChild(video);
        } else if (file.type.startsWith("audio/")) {
          const audio = document.createElement("audio");
          audio.src = URL.createObjectURL(file);
          audio.className = "w-full mt-4";
          audio.controls = true;
          previewContainer.appendChild(audio);
        }

        const fileName = document.createElement("p");
        fileName.textContent = file.name;
        fileName.className = "subtitle text-sm mt-2 truncate";

        previewContainer.appendChild(fileCounter);
        previewContainer.appendChild(removeBtn);
        previewContainer.appendChild(fileName);
        mediaPreview.appendChild(previewContainer);
      });
    }

    searchInput.addEventListener("input", (e) => {
      clearTimeout(timeoutId);
      timeoutId = setTimeout(() => {
        searchBooks((e.target as HTMLInputElement).value);
      }, 500);
    });

    function openBookModal(book: any) {
      const modalBookCover = document.getElementById("modalBookCover") as HTMLElement;
      const modalBookTitle = document.getElementById("modalBookTitle") as HTMLElement;
      if (book.cover_i) {
        modalBookCover.innerHTML = `<img src="https://covers.openlibrary.org/b/id/${book.cover_i}-L.jpg" alt="${book.title}" class="w-full h-full object-cover" />`;
      } else {
        modalBookCover.innerHTML = `<div class="text-white text-center">BOOK COVER</div>`;
      }

      modalBookTitle.innerText = book.title || "book name";

      (document.getElementById("bookNotes") as HTMLTextAreaElement).value = "";
      (document.getElementById("favouriteSections") as HTMLTextAreaElement).value = "";
      (document.getElementById("startedReading") as HTMLInputElement).value = "";

      const today = new Date().toISOString().split("T")[0];
      (document.getElementById("finishedReading") as HTMLInputElement).value = today;

      clearMediaPreview();

      bookModal.classList.remove("hidden");
    }

    async function searchBooks(query: string) {
      if (!query) {
        searchResults.innerHTML = "";
        return;
      }

      try {
        const spellCheckResponse = await fetch(
          `https://openlibrary.org/search.json?q=${encodeURIComponent(query)}&limit=1&spellcheck=true`
        );
        const spellCheckData = await spellCheckResponse.json();

        const suggestedQuery =
          spellCheckData.docs.length === 0 && spellCheckData.spellcheck_suggestions ? spellCheckData.spellcheck_suggestions[1] : query;

        const response = await fetch(
          `https://openlibrary.org/search.json?q=${encodeURIComponent(suggestedQuery)}&limit=12&mode=everything`
        );
        const data = await response.json();

        const booksWithCovers = data.docs
          .filter((book: any) => book.cover_i && book.author_name && book.author_name.length > 0 && book.first_publish_year)
          .slice(0, 6)
          .map(
            (book: any) => `
            <div class="book-result flex flex-col items-center text-center cursor-pointer" data-book='${JSON.stringify(book)}'>
              <img 
                src="https://covers.openlibrary.org/b/id/${book.cover_i}-L.jpg" 
                alt="${book.title}" 
                class="w-32 h-48 object-cover"
              />
              <div class="mt-2">
                <h3 class="subtitle text-lg line-clamp-1">${book.title}</h3>
                <p class="subtitle text-sm opacity-75 line-clamp-1">
                  ${book.author_name[0]}
                </p>
                <p class="subtitle text-xs opacity-50">
                  ${book.first_publish_year}
                </p>
              </div>
            </div>
          `
          )
          .join("");

        const suggestionMessage =
          suggestedQuery !== query
            ? `<p class="subtitle text-sm opacity-75 col-span-3 mb-4">Showing results for "${suggestedQuery}"</p>`
            : "";

        searchResults.innerHTML = booksWithCovers
          ? suggestionMessage + booksWithCovers
          : '<p class="subtitle text-center col-span-3">No matching books found.</p>';

        const bookElements = searchResults.querySelectorAll(".book-result");
        bookElements.forEach((bookElement) => {
          bookElement.addEventListener("click", () => {
            const bookData = JSON.parse((bookElement as HTMLElement).dataset.book || "{}");
            openBookModal(bookData);
          });
        });
      } catch (error) {
        console.error("Error searching books:", error);
        searchResults.innerHTML = '<p class="subtitle text-red-500 col-span-3">Error searching books.</p>';
      }
    }

    initAuthGuard().then((user) => {
      if (user) {
        console.log("User authenticated:", user.email);
        addLogoutFunctionality();
      }
    });
  </script>
</html>
