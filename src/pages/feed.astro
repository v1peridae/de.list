---
import "../styles/global.css";
import Header from "../components/Header.astro";
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <meta name="generator" content={Astro.generator} />
    <title>de.list</title>
  </head>
  <body class="flex flex-col items-center min-h-screen bg-[#feebf6]">
    <Header />

    <div class="w-full max-w-4xl px-4 mt-16">
      <h2 class="titles text-4xl text-center mb-8 text-[#687fe5]">what are ur friends reading</h2>

      <div id="feedContainer" class="space-y-6">
        <div class="text-center subtitle text-lg text-[#687fe5] opacity-90">loading your friends' reading activity...</div>
      </div>
    </div>

    <div id="bookDetailModal" class="fixed inset-0 flex items-center justify-center hidden z-50">
      <div class="bg-[#feebf6] text-[#687fe5] p-8 max-w-4xl w-full mx-4 max-h-[90vh] overflow-y-auto border-b-2 border-[#687fe5]">
        <div class="flex justify-between items-start mb-6">
          <div></div>
          <button id="closeDetailModal" class="navbar text-3xl"> <span class="text-xl">(close)</span></button>
        </div>

        <div class="flex gap-8">
          <div class="flex-shrink-0 w-48">
            <div class="flex flex-col items-center">
              <div id="detailBookCover" class="w-full h-72 bg-[#687fe5] flex items-center justify-center text-[#feebf6] text-lg mb-4"></div>
              <h1 id="detailBookTitle" class="w-full text-center subtitle text-2xl mb-2">Book Title</h1>
              <p id="detailBookAuthor" class="navbar text-lg text-center mb-4">Author</p>
              <p id="detailFriendName" class="subtitle text-sm text-center opacity-90 mb-4">read by: @friend</p>
            </div>
          </div>

          <div class="flex-1">
            <div class="mb-6">
              <label class="block navbar text-lg mb-2">their notes:</label>
              <div id="friendNotes" class="w-full min-h-32 bg-transparent border-2 border-[#687fe5] p-4 subtitle">No notes available</div>
            </div>

            <div class="mb-6">
              <label class="block navbar text-lg mb-2">their favourite sections:</label>
              <div id="friendFavourites" class="w-full min-h-24 bg-transparent border-2 border-[#687fe5] p-4 subtitle">
                No favourite sections :(
              </div>
            </div>

            <div class="mb-6">
              <div class="flex items-center gap-4 text-sm subtitle">
                <span id="readingDates">no reading dates :(</span>
              </div>
            </div>

            <div class="flex justify-end gap-4">
              <button id="addToMyList" type="button" class="border-2 border-[#687fe5] text-[#687fe5] px-6 py-3 navbar text-xl">
                add to my list
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div id="addToListModal" class="fixed inset-0 flex items-center justify-center hidden z-50">
      <div class="bg-[#feebf6] text-[#687fe5] p-8 max-w-2xl w-full mx-4 border-2 border-[#687fe5]">
        <div class="flex justify-between items-start mb-6">
          <h3 class="titles text-2xl">add to my list</h3>
          <button id="closeAddModal" class="navbar text-3xl"> <span class="text-xl">(close)</span></button>
        </div>

        <div class="space-y-4">
          <div>
            <label class="block subtitle text-lg mb-2">my notes about it!</label>
            <textarea
              id="myBookNotes"
              class="w-full h-32 bg-transparent border-2 border-[#687fe5] p-4 subtitle resize-none outline-none"
              placeholder="What do you think about this book?"></textarea>
          </div>

          <div class="flex gap-4">
            <div class="flex-1">
              <label class="block subtitle text-sm mb-1">Started reading:</label>
              <input
                type="date"
                id="myStartDate"
                class="w-full bg-transparent border-b border-[#687fe5] subtitle text-sm outline-none pb-1"
              />
            </div>
            <div class="flex-1">
              <label class="block subtitle text-sm mb-1">Finished reading:</label>
              <input
                type="date"
                id="myFinishDate"
                class="w-full bg-transparent border-b border-[#687fe5] subtitle text-sm outline-none pb-1"
              />
            </div>
          </div>

          <div class="flex justify-end gap-4 mt-6">
            <button id="cancelAdd" type="button" class="border-2 border-[#687fe5] text-[#687fe5] px-6 py-2 navbar text-lg">cancel</button>
            <button id="confirmAdd" type="button" class="bg-[#687fe5] text-[#feebf6] px-6 py-2 navbar text-lg">add to list &lt;3</button>
          </div>
        </div>
      </div>
    </div>
  </body>

  <script>
    import { initProtectedPageAuthGuard, addLogoutFunctionality } from "../utils/authGuard";
    import { auth } from "../firebase/config";

    const feedContainer = document.getElementById("feedContainer") as HTMLElement;
    const bookDetailModal = document.getElementById("bookDetailModal") as HTMLElement;
    const addToListModal = document.getElementById("addToListModal") as HTMLElement;
    const closeDetailModal = document.getElementById("closeDetailModal") as HTMLElement;
    const closeAddModal = document.getElementById("closeAddModal") as HTMLElement;
    const addToMyList = document.getElementById("addToMyList") as HTMLElement;
    const cancelAdd = document.getElementById("cancelAdd") as HTMLElement;
    const confirmAdd = document.getElementById("confirmAdd") as HTMLElement;

    let currentBook: any = null;

    closeDetailModal.addEventListener("click", () => {
      bookDetailModal.classList.add("hidden");
    });

    closeAddModal.addEventListener("click", () => {
      addToListModal.classList.add("hidden");
    });

    cancelAdd.addEventListener("click", () => {
      addToListModal.classList.add("hidden");
    });

    addToMyList.addEventListener("click", () => {
      bookDetailModal.classList.add("hidden");
      addToListModal.classList.remove("hidden");

      const today = new Date().toISOString().split("T")[0];
      (document.getElementById("myFinishDate") as HTMLInputElement).value = today;
    });

    confirmAdd.addEventListener("click", async () => {
      if (!currentBook) return;

      const notes = (document.getElementById("myBookNotes") as HTMLTextAreaElement).value;
      const startDate = (document.getElementById("myStartDate") as HTMLInputElement).value;
      const finishDate = (document.getElementById("myFinishDate") as HTMLInputElement).value;

      try {
        const user = auth.currentUser;
        const headers: HeadersInit = {
          "Content-Type": "application/json",
        };

        if (user) {
          const token = await user.getIdToken();
          headers["Authorization"] = `Bearer ${token}`;
        }

        const response = await fetch("/api/friends?action=save-book", {
          method: "POST",
          headers,
          body: JSON.stringify({
            title: currentBook.title,
            author: currentBook.author,
            notes: notes,
            started: startDate || null,
            finished: finishDate || null,
          }),
        });

        if (response.ok) {
          addToListModal.classList.add("hidden");

          (document.getElementById("myBookNotes") as HTMLTextAreaElement).value = "";
          (document.getElementById("myStartDate") as HTMLInputElement).value = "";
          (document.getElementById("myFinishDate") as HTMLInputElement).value = "";
        }
      } catch (error) {
        console.error("Error adding book:", error);
      }
    });

    async function loadFeed() {
      try {
        const user = auth.currentUser;
        const headers: HeadersInit = {
          "Content-Type": "application/json",
        };

        if (user) {
          const token = await user.getIdToken();
          headers["Authorization"] = `Bearer ${token}`;
        }

        const response = await fetch("/api/friends?action=feed", { headers });
        const data = await response.json();

        if (data.books && data.books.length > 0) {
          renderFeed(data.books);
        } else {
          feedContainer.innerHTML = `
            <div class="text-center space-y-4">
              <p class="subtitle text-lg text-[#687fe5] opacity-90">aw :/ no reading activity from your friends yet</p>
              <p class="subtitle text-sm text-[#687fe5] opacity-90">(psst...you should defo add some friends to see what they're reading! maybe start with @lou (563535))</p>
              <a href="/friends" class="inline-block border-2 border-[#687fe5] text-[#687fe5] px-6 py-2 navbar text-lg">
                add friends
              </a>
            </div>
          `;
        }
      } catch (error) {
        console.error("Error loading feed:", error);
        feedContainer.innerHTML = `
          <div class="text-center subtitle text-lg text-red-500">
            Failed to load feed
          </div>
        `;
      }
    }

    function renderFeed(books: any[]) {
      const feedHtml = books
        .map((book) => {
          const isFinished = !!book.finished;
          const cursorClass = isFinished ? "cursor-pointer" : "cursor-default";
          const statusText = !book.started ? "want to read" : !book.finished ? "currently reading" : "read";
          const activityText = !book.started
            ? `@${book.friend_name} wants to read`
            : !book.finished
              ? `@${book.friend_name} is reading`
              : `@${book.friend_name} read`;

          return `
        <div class="feed-item bg-[#feebf6] border-b-2 border-[#687fe5] p-6 ${cursorClass}" data-book='${JSON.stringify(book)}' data-finished="${isFinished}">
          <div class="flex gap-6">
            <div class="flex-shrink-0">
              <div
                class="w-24 h-36 bg-[#687fe5] flex items-center justify-center text-[#feebf6] text-xs text-center book-cover-container ${book.cover_url ? "" : "missing-cover"}"
                data-book-title="${book.title}"
                data-book-author="${book.author || ""}"
              >
                ${book.cover_url ? `<img src="${book.cover_url}" alt="${book.title}" class="w-full h-full object-cover" />` : "loading..."}
              </div>
            </div>
            <div class="flex-1">
              <p class="subtitle text-sm text-[#687fe5] opacity-90 mb-3">${activityText}</p>
              <h3 class="subtitle text-2xl text-[#687fe5] ">${book.title}</h3>
              <p class="navbar text-lg text-[#687fe5] opacity-90 mb-4">${book.author || "Unknown Author"}</p>
              ${
                book.notes && isFinished
                  ? `<p class="subtitle text-sm text-[#687fe5] mb-3">
                  ${book.notes.substring(0, 150)}${book.notes.length > 150 ? "..." : ""}</p>`
                  : ""
              }
            </div>
          </div>
          <div class="mt-3 flex gap-4 text-xs subtitle text-[#687fe5] opacity-90">
            ${book.started ? `started: ${new Date(book.started).toLocaleDateString()}` : ""}
            ${book.finished ? ` | finished: ${new Date(book.finished).toLocaleDateString()}` : ""}
          </div>
        </div>
      `;
        })
        .join("");

      feedContainer.innerHTML = feedHtml;

      // Fetch and display covers for books that are missing them
      updateCoverImages();

      document.querySelectorAll(".feed-item").forEach((item) => {
        item.addEventListener("click", () => {
          const isFinished = (item as HTMLElement).dataset.finished === "true";
          if (isFinished) {
            const book = JSON.parse((item as HTMLElement).dataset.book || "{}");
            openBookDetail(book);
          }
        });
      });
    }

    async function fetchBookCover(title: string, author?: string): Promise<string | null> {
      try {
        const query = author ? `${title} ${author}` : title;
        const encodedQuery = encodeURIComponent(query);

        const searchResponse = await fetch(`https://openlibrary.org/search.json?q=${encodedQuery}&limit=1`);
        const searchData = await searchResponse.json();

        if (searchData.docs && searchData.docs.length > 0) {
          const book = searchData.docs[0];

          if (book.cover_i) {
            return `https://covers.openlibrary.org/b/id/${book.cover_i}-L.jpg`;
          }
          if (book.isbn && book.isbn.length > 0) {
            const isbn = book.isbn[0];
            return `https://covers.openlibrary.org/b/isbn/${isbn}-L.jpg`;
          }
        }

        return null;
      } catch (error) {
        console.error("Error fetching book cover:", error);
        return null;
      }
    }

    function updateCoverImages() {
      document.querySelectorAll(".book-cover-container.missing-cover").forEach(async (container) => {
        const title = (container as HTMLElement).dataset.bookTitle;
        const author = (container as HTMLElement).dataset.bookAuthor;

        if (!title) return;

        const coverUrl = await fetchBookCover(title, author || undefined);

        if (coverUrl) {
          container.innerHTML = `<img src="${coverUrl}" alt="${title}" class="w-full h-full object-cover" />`;
        } else {
          container.innerHTML = "book<br/>cover";
        }

        container.classList.remove("missing-cover");
      });
    }

    async function openBookDetail(book: any) {
      currentBook = book;

      const modalBookCover = document.getElementById("detailBookCover") as HTMLElement;
      if (book.cover_url) {
        modalBookCover.innerHTML = `<img src="${book.cover_url}" alt="${book.title}" class="w-full h-full object-cover" />`;
      } else {
        // try to fetch a cover dynamically
        const fetchedCover = await fetchBookCover(book.title, book.author);
        if (fetchedCover) {
          modalBookCover.innerHTML = `<img src="${fetchedCover}" alt="${book.title}" class="w-full h-full object-cover" />`;
        } else {
          modalBookCover.innerHTML = `<div class="text-white text-center">BOOK COVER</div>`;
        }
      }

      (document.getElementById("detailBookTitle") as HTMLElement).innerText = book.title;
      (document.getElementById("detailBookAuthor") as HTMLElement).innerText = book.author || "Unknown Author";
      (document.getElementById("detailFriendName") as HTMLElement).innerText = `read by: @${book.friend_name}`;

      (document.getElementById("friendNotes") as HTMLElement).innerText = book.notes || "no notes :/";
      (document.getElementById("friendFavourites") as HTMLElement).innerText = book.favourite || "no favourite sections :sob:";

      let datesText = "no reading dates :/";
      if (book.started || book.finished) {
        const parts = [];
        if (book.started) parts.push(`Started: ${new Date(book.started).toLocaleDateString()}`);
        if (book.finished) parts.push(`Finished: ${new Date(book.finished).toLocaleDateString()}`);
        datesText = parts.join(" • ");
      }
      (document.getElementById("readingDates") as HTMLElement).innerText = datesText;

      bookDetailModal.classList.remove("hidden");
    }

    initProtectedPageAuthGuard().then((user) => {
      if (user) {
        console.log("User authenticated:", user.email);
        addLogoutFunctionality();
        loadFeed();
      }
    });
  </script>
</html>
